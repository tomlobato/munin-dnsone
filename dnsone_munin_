#!/root/.rbenv/shims/ruby

require 'ostruct'
require 'msgpack'
require 'json'

MessagePack::DefaultFactory.register_type(0x00, Symbol)

class MuninDnsOne

    CACHE_FILE = '/tmp/dns_one_cache'
    CACHE_EXPIRE = 30
    DEFAULT_LOG_RESULT_SOCKET_FILE = '/tmp/dns_one_log_result.sock'

    GRAPHS = {
        rcode: {
            percent: true,
            vlabel: '%',
                fields: %w(badalg badkey badmode badname badsig badtime badvers form_err no_error not_auth not_imp not_zone nx_domain nxrr_set refused serv_fail yx_domain yxrr_set)
        },
        req_resource: {
            percent: true,
            vlabel: '%',
            fields: %w(a aaaa any cname hinfo minfo mx ns ptr soa txt wks)
        },
        cache: {
            percent: true,
            vlabel: '%',
            fields: {
                hit: 'Domain found in cache.',
                miss: 'Domain not found in cache, requiring a backend access.',
            },
        },
        requests: {
            vlabel: 'request / second',
            fields: {
                requests: 'Dns request rate (req/sec)',
            },
        }
    }

    def initialize argv
        @argv = argv
    end
        
    def cli 
        case @argv[0]
        when 'config'
            @param = get_params
            config
        when 'install'
            install
        else
            @param = get_params
            run
        end
    end

    private

    def graph
        GRAPHS[@param.graph]
    end

    def fields
        if graph[:fields].is_a? Hash
            graph[:fields]
        else
            _fields = {}            
            graph[:fields].each do |field|
                _fields[field] = field
            end
            _fields
        end
    end

    def config
        puts <<-CONFIG
graph_category DnsOne
graph_title #{@param.graph}
graph_vlabel #{graph[:vlabel]}
graph_args --base 1000 -l 0

CONFIG

        fields.each_pair do |k, v|
            puts "#{k}.label #{k}"
        end

        exit 0
    end

    def run
        stats = get_stats[@param.graph.to_s]

        if graph[:percent]
            sum = stats.values.reduce(:+).to_f
        end 
        
        fields.keys.each do |k|
            value = stats[k] || 0.0
            if graph[:percent]
                value *= 100 / sum 
            end
            puts "#{k}.value #{ value }"
        end

        exit 0
    end

    # Util

    def get_params        
        filename = File.basename __FILE__

        if filename =~ /^dnsone_(#{ GRAPHS.keys.join '|' })/
            graph_key = $1
            OpenStruct.new(
                graph: graph_key.to_sym,
            )
        else
            error "Invalid graph type for filename #{filename}."
        end
    end

    def get_stats
        if false and File.exists?(CACHE_FILE) and
            (Time.now - File.stat(CACHE_FILE).ctime) < CACHE_EXPIRE
            MessagePack.unpack File.open(CACHE_FILE, 'rb').read
         else
            stat = fetch_stats_socket
            File.open(CACHE_FILE, 'wb', 0600).write MessagePack.pack(stat)
            stat
        end
    end

    def fetch_stats
        stat = {}
        section = nil

        `dns_one stats`.each_line do |l|
            if l =~ /---\s*(\S+)\s*---/
                section = $1
            elsif l =~ /^(.*?)\s+(.*)$/
                key = $1
                val = $2.strip.to_f
                stat[section] ||= {}
                stat[section][key] = val
            end
        end

        stat["requests"] = {
            requests: (stat["cache"].values.reduce(:+).to_f / 300.0)
        }

        stat
    end

    def fetch_stats_socket
        require 'socket'

        stats_json = UNIXSocket.open(DEFAULT_LOG_RESULT_SOCKET_FILE) do |sock|
            JSON.parse sock.readline.chomp
        end

        stat = {}

        stat["requests"] = {
            requests: stats_json['requests'] / 300.0
        }

        stat["cache"] = {
            hit: stats_json['cache'],
            miss: (stats_json['requests'] - stats_json['cache'])
        }

        stat['rcode'] = stats_json['rcode']
        stat['req_resource'] = stats_json['req_resource']

        stat
    end

    def install
        # Links
        links = []
        GRAPHS.keys.each do |graph_key|
            links << graph_key
        end
        target = File.expand_path(__FILE__)
        links.each do |link|
            system "ln -s #{target} /etc/munin/plugins/dnsone_#{link}"
        end

        # munin_node_conf
        munin_node_conf = "\n[dnsone_*]\nuser root\n\n"
        File.open('/etc/munin/plugin-conf.d/munin-node', 'a').write munin_node_conf
    end

    def error msg
        STDERR.puts msg
        exit 1
    end
end

MuninDnsOne.new(ARGV).cli
